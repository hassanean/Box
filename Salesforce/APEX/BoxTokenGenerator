public class BoxTokenGenerator {
    private static String enterpriseId = '345489527';
    private static String publicKeyId = '6aijgx1w';
    private static String privateKey = 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDZrz1DoeuBW2zVFz2rvz2zK3yAsUDLR9L4f6NBmLsW0ljCVZaVNiXeQxyha2US0T3KVWctOQvLyizMMhh1NqSig04ncA5l3LLA8eqSFphGpr6ez7+GE7RAwXrVS7Hhwmq61L4oUbx+zpOFCXz/VfS+KC7J+wcCA5R07Sz8eyLshWOvIfy2hRHGlQUujU2xzt3IXIhmQ270mFsoNbdBVj/52vgn3zwHWC+g/W4NfflupA1KFBe/0Aw9l/I/T/YoD9ywNKCmEMgISH8IMZUgqwEsTqSaJUBnm0kUnoOFQUZskwIdsJONyHsYX24bzYzBoMEnT+4aElaIdbLtW/mHyQ5PAgMBAAECggEAXRiw3sfU7FGpTcjOuzDitkmWyYME7uscsuIDc/5ZpPz4sMPhzpaFw3R4PiCr7UxHXM0BfzmybcldN0cFZruj1UzKk9s8jRvB5vqPE0NOhIizZT/77N9oa3lTiv0Aaki3VIe/e4bZUnIObQsNxjWAogKVYBRXfukBCLCWWLRgzz3C4ezk3e7cxV0B9mqD5B+exL7CFN3nXBhN6qUvmeptUDbnFv83bNcJLfupI0j7Wenra3vqU7v0e7y9gzTpi8ceS6iwwSOrgQ4jgfjY+D598QUMYrjRtayz6vdBh4R8xF+eCPh44JLPDPhFKxcOsUw1mGR7dS4hDUnIXk3wjZWqwQKBgQDupRYhmh8E37VKEVn3nNxc3qjFq/SKUE6VdLP9RPrLzmrJ0uyOGcjzjD717JdSY+8wItmHeGRS/oURqQcNWlBHO59vRq6ETUvDJbu+xaArkIIeNMIDA16geHw5qTvFAtSacBvcJr0lBQXQ9z0bNFym8ZISIsIiRWHOond1rgYMOQKBgQDpg+3DHkOu0otXamT3Up9llNquWD+n8GS3dlGpoFgGy+8cDAovjaIIHn28yYbVfN3OrC9wwKjFfQaXFE7bkl+Dv0T1XZb6ggOroCVvBmVZEMr6SW1t2b9nCGT1zcp/wtlPKGNp+bwYcXhbUBNCPGNG2Z5CB4UyJfhUTsfh0p3+xwKBgQCZ6PjEBR06THkkYtpuOslYT/XzPrqBNdfoxhKLJqDFLsRqk9EiuHiEso+slcDmTzNlDSTUHQ4/BI2X3TaCIxwhRM/HuYM2Ko/RNRXHrLdnQVTZ3FbAEL1Hq00a9w1oOzIYxHMDYiycooekxL+xOu0CckwtzCL+bVbuKJP43pph6QKBgBpbNqnQL6l6wBl0u8Kig7UucOQ+t6iX3HZMl3kCzQyvVeSfg0LMxJ4P+vck8+ACwPJDwvMB+8qWivjgZOopgjhXjUv4bUMHC60CXVdDrIq59376bKx6aD0T2HlZ6eIztt1VXKsocc98dy4vQo02TapAg7lGKgV3/aheX/cgE48fAoGBAMIxiYTyzcdEh8vDb6SjYC0bl8CEnmRRW04ixZkNtoHYajtFeDdxoHgJCeXCBLJwiDIST9bXQrddDKtwUyTTqZ48PuEWE8+vGvRb6IM7hVi+7pgonSqg/kyOBGfb+RZ6t05XnGkV0ooVp+KqJdlkFJ4qqjpHA92K1rweyM4Tpcvk';
    private static String clientId = 'u9xz1qol2is56nm2qn67jb5zojhds67j';
    private static String clientSecret = 'L2vPWizTyL0zXmMTQ7cAbS1ANJlH8DTO';
    private BoxPlatformApiConnection api;
    
    public String token { get; set; }
    public String folderName { get; set; }
    
    public BoxTokenGenerator() {
        /*
        BoxJwtEncryptionPreferences preferences = new BoxJwtEncryptionPreferences();
        preferences.setPublicKeyId(this.publicKeyId);
        preferences.setPrivateKey(this.privateKey);
        api = BoxPlatformApiConnection.getAppEnterpriseConnection(this.enterpriseId, this.clientId, this.clientSecret, preferences);
        token = downscopeToken(api.getAccessToken());
		*/
    }
    
    private static BoxPlatformApiConnection getBoxUserConnection(String userId)	{
        BoxJwtEncryptionPreferences preferences = new BoxJwtEncryptionPreferences();
        preferences.setPublicKeyId(publicKeyId);
        preferences.setPrivateKey(privateKey);
        return BoxPlatformApiConnection.getAppUserConnection(userId, clientId, clientSecret, preferences);
    }
    
    private static void delay()	{
        Long startTime = DateTime.now().getTime();
		Long finishTime = DateTime.now().getTime();
		while ((finishTime - startTime) < 10000) {
    	//sleep for 10s
    		finishTime = DateTime.now().getTime();
		}
    }
    
    @future(callout=true) 
    public static void createSubFolders(String recordId)  {
        System.debug('createSubFolders async callout');
        delay();
        BoxPlatformApiConnection api = getBoxUserConnection('12754179874');
       	box__FRUP__c frup = [SELECT box__Folder_ID__c, box__Record_ID__c FROM box__FRUP__c WHERE box__Record_ID__c = :recordId LIMIT 1];
       	String folderId = frup.box__Folder_ID__c;
        System.debug('createSubFolders folder with id: ---- ' + folderId);
        BoxFolder parentFolder = new BoxFolder(api, folderId);
        BoxFolder.Info childFolderInfo1 = parentFolder.createFolder('Incoming');
        BoxFolder.Info childFolderInfo2 = parentFolder.createFolder('Outgoing');
        String cacheKey = 'local.BoxCache.'+recordId;
		Cache.Org.put(cacheKey, parentFolder.getFolderInfo().id, 172800, Cache.Visibility.ALL, true);
        String getCache = (String) Cache.Org.get(cacheKey);
        system.debug('Cache Key: ~~~~~~~~~ ' + cacheKey + ' -- value -- '+ getCache);

    }
    
    public void createFolder() {
        BoxFolder parentFolder = new BoxFolder(api, '0');
		BoxFolder.Info childFolderInfo = parentFolder.createFolder(folderName);
    }
    
    public String getToken() {
        return token;
    }
    
    private String downscopeToken(String token) {
		String accessToken;
        String scopes = 'base_explorer item_download item_upload item_preview item_rename item_share item_delete';
        String endpoint = 'https://api.box.com/oauth2/token';
        String body = 'scope=' + scopes +
        	'&grant_type=urn:ietf:params:oauth:grant-type:token-exchange' +      
       		'&subject_token=' + token +
       		'&subject_token_type=urn:ietf:params:oauth:token-type:access_token';

        // format Box API request to downscope token
    	HttpRequest request = new HttpRequest();
        request.setMethod('POST');
        request.setEndpoint(endpoint);
        request.setBody(body);
        
        //Create Http, send request
	    Http http = new Http();
    	HTTPResponse response = http.send(request);
        String resBody = response.getBody();
        System.debug('Body of refresh response: ' + resBody);
        
        //loop through tokens to be parsed, save access token
        JSONParser parserTokens = JSON.createParser(resBody);
    	while (parserTokens.nextToken() != null){
      
          if (parserTokens.getCurrentToken() == JSONToken.FIELD_Name &&
          		parserTokens.getText() == 'access_token'){
            parserTokens.nextToken();
            //save access token
            accessToken = parserTokens.getText();
          }
    	}
        
        return accessToken;        
    }
}
